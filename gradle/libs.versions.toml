[versions]
coroutines = "1.10.2"
jupiter = "5.12.2"
junitplatform = "1.12.2"
testcontainers = "1.21.0"
netty-tcnative = "2.0.72.Final"
reactor-adapter = "3.7.6"
snakeyaml = "2.4"
r2dbc-postgresql = "1.0.7.RELEASE"
spring-boot = "3.5.0"
mounted-secrets-client = "0.2.5"
karate-junit5 = "1.4.1"
mockito = "5.18.0"
mockito-kotlin = "5.4.0" # Using a recent known good version for mockito-kotlin 5.x
mockk = "1.13.12" # Adding MockK for modern Kotlin testing
# kotlin-test will use the main kotlin version
# kotlin = "1.9.25" # already defined

# Modern testing libraries following JetBrains best practices
kotest = "5.8.1"                    # Modern assertion library with Kotlin DSL
kotest-extensions = "1.3.0"         # Kotest extensions for Spring and TestContainers
turbine = "1.0.0"                   # Testing library for Kotlin Flows/Coroutines
mockwebserver = "4.12.0"            # OkHttp MockWebServer for HTTP testing
kotlinx-coroutines-test = "1.10.2"  # Official coroutines testing utilities
strikt = "0.34.1"                   # Modern assertion library alternative

spring-dep = "1.1.7"
sonar = "6.2.0.5505"
kotlin = "1.9.25"

[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dep" }
sonarqube = { id = "org.sonarqube", version.ref = "sonar" }
jacoco = { id = "jacoco" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }

[libraries]
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-websocket = { module = "org.springframework.boot:spring-boot-starter-websocket" }
spring-boot-starter-graphql = { module = "org.springframework.boot:spring-boot-starter-graphql" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-log4j2 = { module = "org.springframework.boot:spring-boot-starter-log4j2" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "coroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "coroutines" }
reactor-adapter = { module = "io.projectreactor.addons:reactor-adapter" }
snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "snakeyaml" }
r2dbc-postgresql = { module = "org.postgresql:r2dbc-postgresql", version.ref = "r2dbc-postgresql" }
spring-data-r2dbc = { module = "org.springframework.data:spring-data-r2dbc", version.ref = "spring-boot" }
mounted-secrets-client = { module = "io.github.skhatri:mounted-secrets-client", version.ref = "mounted-secrets-client" }
netty-tcnative = { module = "io.netty:netty-tcnative-boringssl-static", version.ref = "netty-tcnative" }

# Core testing libraries
karate-junit5 = { module = "com.intuit.karate:karate-junit5", version.ref = "karate-junit5" }
reactor-test = { module = "io.projectreactor:reactor-test" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin"}
spring-boot-test = { module = "org.springframework.boot:spring-boot-test" }
spring-graphql-test = { module = "org.springframework.graphql:spring-graphql-test" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }

# Modern testing libraries following JetBrains best practices
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-assertions-json = { module = "io.kotest:kotest-assertions-json", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-extensions-spring = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotest-extensions" }
kotest-extensions-testcontainers = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotest-extensions" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockwebserver" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines-test" }
strikt-core = { module = "io.strikt:strikt-core", version.ref = "strikt" }

# JUnit 5
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "jupiter" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "jupiter" }
junit-vintage-engine = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "jupiter" }

junit-platform-commons = { module = "org.junit.platform:junit-platform-commons", version.ref = "junitplatform" }
junit-platform-runner = { module = "org.junit.platform:junit-platform-runner", version.ref = "junitplatform" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version.ref = "junitplatform" }
junit-platform-engine = { module = "org.junit.platform:junit-platform-engine", version.ref = "junitplatform" }

testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
test-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
testcontainers-mockserver = { module = "org.testcontainers:mockserver", version.ref = "testcontainers" }

[bundles]
spring-boot = ["spring-boot-starter-webflux", "spring-boot-starter-actuator", "spring-boot-starter-graphql", "spring-boot-starter-log4j2", "spring-boot-starter-websocket", "snakeyaml"]
kotlin-app = ["kotlin-reflect", "kotlin-stdlib-jdk8", "kotlinx-coroutines-core", "kotlinx-coroutines-reactive", "kotlinx-coroutines-reactor", "jackson-module-kotlin"]
app = ["mounted-secrets-client", "reactor-adapter"]
pg = ["r2dbc-postgresql", "spring-data-r2dbc"]

# Enhanced test bundles following best practices
test-core = ["junit-jupiter-api", "junit-jupiter-params", "junit-platform-commons", "junit-platform-runner", 
    "testcontainers", "test-postgresql", "testcontainers-junit-jupiter", "testcontainers-mockserver",
    "karate-junit5", "reactor-test", "mockito-core", "mockito-kotlin", "mockk", "kotlin-test-junit5",
    "spring-boot-test", "spring-boot-starter-test", "spring-graphql-test",
    # Modern testing libraries
    "kotest-runner-junit5", "kotest-assertions-core", "kotest-assertions-json", "kotest-property",
    "kotest-extensions-spring", "kotest-extensions-testcontainers", "turbine", "mockwebserver",
    "kotlinx-coroutines-test", "strikt-core"
]
test-runtime = ["junit-jupiter-engine", "junit-vintage-engine", "junit-platform-launcher", "junit-platform-engine"]
