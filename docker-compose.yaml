version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"


networks:
  default:
    name: microservices
    driver: bridge
services:

  starter:
    profiles:
      - app
    container_name: starter
    environment:
      - "POSTGRES_USER=${POSTGRES_HOST:-postgres}"
      - "POSTGRES_HOST=postgres"
      - "OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}"
      - "OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}/v1/traces"
      - "OTEL_RESOURCE_ATTRIBUTES=service.name=starter"
      - "OTEL_LOGS_EXPORTER=none"
      - "OTEL_SERVICE_NAME=starter"
      - "OTEL_EXPORTER_OTLP_INSECURE=true"
      - "OTEL_EXPORTER_OTLP_METRICS_INSECURE=true"
      - "OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4318/v1/metrics"
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"

  postgres:
    profiles:
      - app
      - db
    command: [ /bin/bash, -c, /tmp/scripts/init.sh ]
    container_name: postgres-data
    depends_on:
      postgres-server:
        condition: service_healthy
    environment:
      - "POSTGRES_USER=${POSTGRES_USER:-postgres}"
      - "PGPASSWORD=${POSTGRES_PASSWORD:-postgres}"
    image: "postgres:${POSTGRES_VERSION:-17.0}"
    volumes:
      - "./scripts/containers/postgres/script/init.sh:/tmp/scripts/init.sh"
      - "${POSTGRES_DATA:-./scripts/containers/postgres/sql}:/tmp/data/sql"


  postgres-server:
    profiles:
      - app
      - db
    container_name: postgres
    environment:
      - "POSTGRES_USER=${POSTGRES_USER:-postgres}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}"
      - PGDATA=/data/postgres
    healthcheck:
      interval: 10s
      retries: 3
      test: [ CMD-SHELL, pg_isready ]
      timeout: 5s
    image: "postgres:${POSTGRES_VERSION:-17.0}"
    volumes:
      - "./scripts/containers/postgres/csv:/tmp/data/csv"
    ports:
      - "5432:5432"

  keycloak:
    profiles:
      - gateway
    image: quay.io/keycloak/keycloak:22.0.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8080:8080"
    volumes: [ ]
    container_name: keycloak
    command:
      - "start-dev"
      - "--health-enabled=true"

  keycloak-init:
    profiles:
      - gateway
    image: skhtari/jq
    container_name: keycloak-init
    volumes:
      - ./scripts/containers/keycloak/setup.sh:/tmp/setup.sh
    command:
      - /tmp/setup.sh
    restart: on-failure
    depends_on:
      - keycloak

  kong:
    profiles:
      - gateway
    container_name: kong
    depends_on:
      kong-data:
        condition: service_completed_successfully
      postgres:
        condition: service_completed_successfully
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=postgres
      - KONG_PG_PASSWORD=postgres
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001,0.0.0.0:8444 ssl
      - KONG_PLUGINS=rate-limiting
    healthcheck:
      interval: 10s
      retries: 5
      test: [ CMD-SHELL, kong health ]
      timeout: 10s
    image: "kong:${KONG_VERSION:-3.8.0}"
    ports:
      - 8001:8001
      - 8000:8000
    restart: unless-stopped

  kong-data:
    profiles:
      - gateway
    command:
      - kong
      - migrations
      - bootstrap
    container_name: kong-data
    depends_on:
      postgres:
        condition: service_completed_successfully
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=postgres
      - KONG_PG_PASSWORD=postgres
    image: "kong:${KONG_VERSION:-3.8.0}"



  jaeger:
    profiles:
      - otel
    image: ${JAEGERTRACING_IMAGE}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "${JAEGER_PORT}:${JAEGER_PORT}"         # Jaeger UI
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

  # Grafana
  grafana:
    profiles:
      - otel
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
    volumes:
      - ./scripts/containers/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./scripts/containers/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    logging: *logging

  # OpenTelemetry Collector
  otel-collector:
    profiles:
      - otel
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
      - ${OTEL_COLLECTOR_CONFIG_EXTRAS}:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
      - "9888:9888"
      - "8888:8888"
    depends_on:
      jaeger:
        condition: service_started
      opensearch:
        condition: service_healthy
    logging: *logging
    environment:
      - ENVOY_PORT
      - HOST_FILESYSTEM
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP

  # Prometheus
  prometheus:
    profiles:
      - otel
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ${PROMETHEUS_CONFIG}:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    logging: *logging

  # OpenSearch
  opensearch:
    profiles:
      - otel
    image: ${OPENSEARCH_IMAGE}
    container_name: opensearch
    deploy:
      resources:
        limits:
          memory: 1100M
    restart: unless-stopped
    environment:
      - cluster.name=demo-cluster
      - node.name=demo-node
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
      - _JAVA_OPTIONS
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    logging: *logging
